// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package v1transactions

import (
	"context"
	"github.com/eurofurence/reg-payment-service/internal/repository/downstreams/cncrdadapter"
	"sync"
)

// Ensure, that CncrdAdapterMock does implement cncrdadapter.CncrdAdapter.
// If this is not the case, regenerate this file with moq.
var _ cncrdadapter.CncrdAdapter = &CncrdAdapterMock{}

// CncrdAdapterMock is a mock implementation of cncrdadapter.CncrdAdapter.
//
//	func TestSomethingThatUsesCncrdAdapter(t *testing.T) {
//
//		// make and configure a mocked cncrdadapter.CncrdAdapter
//		mockedCncrdAdapter := &CncrdAdapterMock{
//			CreatePaylinkFunc: func(ctx context.Context, request cncrdadapter.PaymentLinkRequestDto) (cncrdadapter.PaymentLinkDto, error) {
//				panic("mock out the CreatePaylink method")
//			},
//			GetPaylinkByIdFunc: func(ctx context.Context, id uint) (cncrdadapter.PaymentLinkDto, error) {
//				panic("mock out the GetPaylinkById method")
//			},
//		}
//
//		// use mockedCncrdAdapter in code that requires cncrdadapter.CncrdAdapter
//		// and then make assertions.
//
//	}
type CncrdAdapterMock struct {
	// CreatePaylinkFunc mocks the CreatePaylink method.
	CreatePaylinkFunc func(ctx context.Context, request cncrdadapter.PaymentLinkRequestDto) (cncrdadapter.PaymentLinkDto, error)

	// GetPaylinkByIdFunc mocks the GetPaylinkById method.
	GetPaylinkByIdFunc func(ctx context.Context, id uint) (cncrdadapter.PaymentLinkDto, error)

	// calls tracks calls to the methods.
	calls struct {
		// CreatePaylink holds details about calls to the CreatePaylink method.
		CreatePaylink []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Request is the request argument value.
			Request cncrdadapter.PaymentLinkRequestDto
		}
		// GetPaylinkById holds details about calls to the GetPaylinkById method.
		GetPaylinkById []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uint
		}
	}
	lockCreatePaylink  sync.RWMutex
	lockGetPaylinkById sync.RWMutex
}

// CreatePaylink calls CreatePaylinkFunc.
func (mock *CncrdAdapterMock) CreatePaylink(ctx context.Context, request cncrdadapter.PaymentLinkRequestDto) (cncrdadapter.PaymentLinkDto, error) {
	callInfo := struct {
		Ctx     context.Context
		Request cncrdadapter.PaymentLinkRequestDto
	}{
		Ctx:     ctx,
		Request: request,
	}
	mock.lockCreatePaylink.Lock()
	mock.calls.CreatePaylink = append(mock.calls.CreatePaylink, callInfo)
	mock.lockCreatePaylink.Unlock()
	if mock.CreatePaylinkFunc == nil {
		var (
			paymentLinkDtoOut cncrdadapter.PaymentLinkDto
			errOut            error
		)
		return paymentLinkDtoOut, errOut
	}
	return mock.CreatePaylinkFunc(ctx, request)
}

// CreatePaylinkCalls gets all the calls that were made to CreatePaylink.
// Check the length with:
//
//	len(mockedCncrdAdapter.CreatePaylinkCalls())
func (mock *CncrdAdapterMock) CreatePaylinkCalls() []struct {
	Ctx     context.Context
	Request cncrdadapter.PaymentLinkRequestDto
} {
	var calls []struct {
		Ctx     context.Context
		Request cncrdadapter.PaymentLinkRequestDto
	}
	mock.lockCreatePaylink.RLock()
	calls = mock.calls.CreatePaylink
	mock.lockCreatePaylink.RUnlock()
	return calls
}

// GetPaylinkById calls GetPaylinkByIdFunc.
func (mock *CncrdAdapterMock) GetPaylinkById(ctx context.Context, id uint) (cncrdadapter.PaymentLinkDto, error) {
	callInfo := struct {
		Ctx context.Context
		ID  uint
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetPaylinkById.Lock()
	mock.calls.GetPaylinkById = append(mock.calls.GetPaylinkById, callInfo)
	mock.lockGetPaylinkById.Unlock()
	if mock.GetPaylinkByIdFunc == nil {
		var (
			paymentLinkDtoOut cncrdadapter.PaymentLinkDto
			errOut            error
		)
		return paymentLinkDtoOut, errOut
	}
	return mock.GetPaylinkByIdFunc(ctx, id)
}

// GetPaylinkByIdCalls gets all the calls that were made to GetPaylinkById.
// Check the length with:
//
//	len(mockedCncrdAdapter.GetPaylinkByIdCalls())
func (mock *CncrdAdapterMock) GetPaylinkByIdCalls() []struct {
	Ctx context.Context
	ID  uint
} {
	var calls []struct {
		Ctx context.Context
		ID  uint
	}
	mock.lockGetPaylinkById.RLock()
	calls = mock.calls.GetPaylinkById
	mock.lockGetPaylinkById.RUnlock()
	return calls
}
