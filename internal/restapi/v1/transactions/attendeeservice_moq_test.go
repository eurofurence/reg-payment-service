// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package v1transactions

import (
	"context"
	"github.com/eurofurence/reg-payment-service/internal/repository/downstreams/attendeeservice"
	"sync"
)

// Ensure, that AttendeeServiceMock does implement attendeeservice.AttendeeService.
// If this is not the case, regenerate this file with moq.
var _ attendeeservice.AttendeeService = &AttendeeServiceMock{}

// AttendeeServiceMock is a mock implementation of attendeeservice.AttendeeService.
//
//	func TestSomethingThatUsesAttendeeService(t *testing.T) {
//
//		// make and configure a mocked attendeeservice.AttendeeService
//		mockedAttendeeService := &AttendeeServiceMock{
//			ListMyRegistrationIdsFunc: func(ctx context.Context) ([]int64, error) {
//				panic("mock out the ListMyRegistrationIds method")
//			},
//			PaymentsChangedFunc: func(ctx context.Context, debitorId uint) error {
//				panic("mock out the PaymentsChanged method")
//			},
//		}
//
//		// use mockedAttendeeService in code that requires attendeeservice.AttendeeService
//		// and then make assertions.
//
//	}
type AttendeeServiceMock struct {
	// ListMyRegistrationIdsFunc mocks the ListMyRegistrationIds method.
	ListMyRegistrationIdsFunc func(ctx context.Context) ([]int64, error)

	// PaymentsChangedFunc mocks the PaymentsChanged method.
	PaymentsChangedFunc func(ctx context.Context, debitorId uint) error

	// calls tracks calls to the methods.
	calls struct {
		// ListMyRegistrationIds holds details about calls to the ListMyRegistrationIds method.
		ListMyRegistrationIds []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// PaymentsChanged holds details about calls to the PaymentsChanged method.
		PaymentsChanged []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// DebitorId is the debitorId argument value.
			DebitorId uint
		}
	}
	lockListMyRegistrationIds sync.RWMutex
	lockPaymentsChanged       sync.RWMutex
}

// ListMyRegistrationIds calls ListMyRegistrationIdsFunc.
func (mock *AttendeeServiceMock) ListMyRegistrationIds(ctx context.Context) ([]int64, error) {
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockListMyRegistrationIds.Lock()
	mock.calls.ListMyRegistrationIds = append(mock.calls.ListMyRegistrationIds, callInfo)
	mock.lockListMyRegistrationIds.Unlock()
	if mock.ListMyRegistrationIdsFunc == nil {
		var (
			int64sOut []int64
			errOut    error
		)
		return int64sOut, errOut
	}
	return mock.ListMyRegistrationIdsFunc(ctx)
}

// ListMyRegistrationIdsCalls gets all the calls that were made to ListMyRegistrationIds.
// Check the length with:
//
//	len(mockedAttendeeService.ListMyRegistrationIdsCalls())
func (mock *AttendeeServiceMock) ListMyRegistrationIdsCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockListMyRegistrationIds.RLock()
	calls = mock.calls.ListMyRegistrationIds
	mock.lockListMyRegistrationIds.RUnlock()
	return calls
}

// PaymentsChanged calls PaymentsChangedFunc.
func (mock *AttendeeServiceMock) PaymentsChanged(ctx context.Context, debitorId uint) error {
	callInfo := struct {
		Ctx       context.Context
		DebitorId uint
	}{
		Ctx:       ctx,
		DebitorId: debitorId,
	}
	mock.lockPaymentsChanged.Lock()
	mock.calls.PaymentsChanged = append(mock.calls.PaymentsChanged, callInfo)
	mock.lockPaymentsChanged.Unlock()
	if mock.PaymentsChangedFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.PaymentsChangedFunc(ctx, debitorId)
}

// PaymentsChangedCalls gets all the calls that were made to PaymentsChanged.
// Check the length with:
//
//	len(mockedAttendeeService.PaymentsChangedCalls())
func (mock *AttendeeServiceMock) PaymentsChangedCalls() []struct {
	Ctx       context.Context
	DebitorId uint
} {
	var calls []struct {
		Ctx       context.Context
		DebitorId uint
	}
	mock.lockPaymentsChanged.RLock()
	calls = mock.calls.PaymentsChanged
	mock.lockPaymentsChanged.RUnlock()
	return calls
}
