openapi: 3.0.3
info:
  title: Reg Payment Service - OpenAPI 3.0
  description: |-
    The Reg Payment Service is a processesor to handle transaction related tasks in regards to 
    registration tasks. 
    
    Those tasks are:
    * Creating transactions for payments and dues
        * Interaction with payment provider adapters
    * Retrieving debitor transactions
    * Historization of transaction status
    
  license:
    name: MIT
    url: https://github.com/eurofurence/reg-payment-service/LICENSE
  version: 1.0.0
servers:
  - url: /api/rest
    description: localhost
  - url: /paysrv/api/rest
    description: server
tags:
  - name: transactions
    description: The transaction API
paths:
  /v1/transactions:
    get:
      tags:
        - transactions
      summary: Request information about existing Transactions
      description: |-
        Get existing transactions, provided they are visible to you.
        
        Visibility rules: 
        * an admin may see all transactions for any debitor of any status 
        * a debitor may only see their own transactions, and excluding status deleted
          
        (note: to find out which debitor_ids are "their own", have a look at the GET /attendees endpoint of
         the attendee service, which answers this question. You will need to pass on the user token so it knows who's asking)
      operationId: getTransactions
      parameters:
        - name: debitor_id
          in: query
          description: The id of a debitor to filter by
          required: false
          schema:
            type: integer
            format: int64
            minimum: 1
        - name: transaction_identifier
          in: query
          description: filter by transaction_identifier
          required: false
          schema:
            type: string
            example: EF2022-000004-1028-200954-4711
        - name: effective_from
          in: query
          description: filter by effective date (inclusive) lower bound
          required: false
          schema:
            type: string
            example: 2022-10-01
        - name: effective_before
          in: query
          description: filter by effective date (exclusive) upper bound - this makes it easy to get everything in a given month
          required: false
          schema:
            type: string
            example: 2022-11-01
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionResponse'
        '400':
          description: Invalid ID supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Request was unauthorized (wrong or no api token, invalid, expired or no bearer token)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: No Transactions available for this debitor given the visibility rules, or
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: An unexpected error occurred. A reasonable effort is made to return error information, but there are situations where this will not work
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - api_key: []
        - bearer_auth: []
    post:
      tags:
        - transactions
      summary: Add a new transaction, possibly creating a payment link in the process.
      description: |- 
        This endpoint adds a new transaction.
        
        If transaction_type=payment, method=credit, status=tentative,
        then a payment link is created and the transaction is saved including the payment link and its id.

        In all other cases, the transaction is saved as is, and no payment link is created.

        Only admin or api token allows saving transactions.
        
        This endpoint returns the created transaction so you get access to the payment link, if any.
      operationId: createTransaction
      requestBody:
        description: A transaction object to perform an operation according to the data provided
        required: true
        content:
          application/json:
            schema: 
              $ref: '#/components/schemas/Transaction'
      responses:
        '201':
          description: Successfully created
          headers:
            Location:
              schema:
                type: string
              description: URL of the created resource, ending in the assigned transaction ID.
              example: /v1/transactions/EF2023-000001-0210-123000-4711
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
        '400':
          description: Request validation failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Request was unauthorized (wrong or no api token, invalid, expired or no bearer token)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Request was forbidden (you do not have permission to create transactions)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: This debitor already has an open payment link, please use that one (or delete it first)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: An unexpected error occurred. A reasonable effort is made to return error information, but there are situations where this will not work
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - api_key: [] 
        - bearer_auth: []
  /v1/transactions/{id}:
    put:
      tags:
        - "transactions"
      summary: Update a transaction
      description: |-
        Updates a transaction.
        
        Only api token or admin may update transactions.

        Status changes:
        (The previous status is always historized, see the history field)
        
        Within 3 calendar days of creation, for any transaction an admin may change
        - status -> deleted
        
        Afterwards, the only possible change is status for payments
        * tentative -> pending (payment link has been used)
        * pending -> valid (payment is confirmed by admin or by payment provider)
        * tentative -> deleted (payment link has been deleted)
        * pending -> deleted (payment has been deemed in error)


        Payment processor information changes:
        (does not need to be historized, as the adapter will write logs)

        At any time, api token may change the payment_processor_information. This is so the
        adapters have some way to store internal state.

      
        Due Date changes:
        (does not need to be historized)
        
        At any time, an admin may change the due date (used for dues only).

      
        It is an error to attempt any changes not listed above.        
        Any other changes should be made by setting this transaction to deleted and creating a new one.
      operationId: updateTransactions
      parameters:
        - name: id
          in: path
          description: The id of the transaction to update
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      requestBody:
        required: true
        description: The new transaction data. It is an error to change anything other than the status.
        content: 
          application/json:
            schema: 
              $ref: '#/components/schemas/Transaction'
      responses:
        '204':
          description: successful operation
        '400':
          description: Request validation failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Request was unauthorized (wrong or no api token, invalid, expired or no bearer token)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Request was forbidden (you do not have permission to change transactions)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: An unexpected error occurred. A reasonable effort is made to return error information, but there are situations where this will not work
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - api_key: []
        - bearer_auth: []
  /v1/transactions/initiate-payment:
    post:
      tags:
        - transactions
      summary: Convenience endpoint for creating a payment via payment-link for all outstanding dues
      description: |-
        This endpoint adds a new transaction with
          transaction_type=payment, method=credit, status=tentative
        for the currently outstanding amount, and then a payment link is created and the transaction is saved
        including the payment link and its id.

        This endpoint returns the created transaction so you get access to the payment link.
      operationId: initiatePaylinkTransaction
      requestBody:
        description: A transaction object to perform an operation according to the data provided
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionInitiator'
      responses:
        '201':
          description: Successfully created
          headers:
            Location:
              schema:
                type: string
              description: URL of the created resource, ending in the assigned transaction ID.
              example: /v1/transactions/481
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
        '400':
          description: Request validation failed, or the current dues balance for this debitor is 0
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Request was unauthorized (wrong or no api token, invalid, expired or no bearer token)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Request was forbidden (you do not have permission to create transactions for this debitor)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: No dues transactions for this debitor id exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: This debitor already has an open payment link, please use that one
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: An unexpected error occurred. A reasonable effort is made to return error information, but there are situations where this will not work
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - api_key: []
        - bearer_auth: []
components:
  schemas:
    TransactionResponse:
      type: object
      properties:
        payload:
          $ref: '#/components/schemas/Transactions'
        # pagination:
        #   type: object
        #   $ref: '#/components/schemas/Pagination'
    Transactions:
      type: array
      items: 
        $ref: '#/components/schemas/Transaction'
    Transaction:
      type: object
      required:
        - debitor_id
        - transaction_type
        - method
        - amount
        - status
        - effective_date
      properties:
        debitor_id:
          type: integer
          format: int64
          minimum: 1
          description: the debitor the transaction concerns
        transaction_identifier:
          type: string
          description: |-
            a reference id that can be used to search for a particular transaction.

            If you do not set this, we will fill it for you as follows for each newly created transaction

            {prefix-from-config}-NNNNNN-MMDD-HHMMSS-RRRR

            where {prefix-from-config} might be something like "EF2022", NNNNNN is the debitor id in 6 digits,
            MMDD is the month and day of transaction creation, HHMMSS is the time including seconds,
            and RRRR is a random 4 digit numeric code to ensure uniqueness even within the same second.

            Passed on to the credit card processor, so make sure this is unique across even multiple years.
            Internally, we only ensure uniqueness within the same year (unique database index for fast lookup).
            
            Must consist solely of A-Z, 0-9 and -, no spaces.
            
            Will always be set when an existing transaction is read, and it is not allowed to change this
            for existing transactions (the credit card processor uses this identifier).
            
            TODO test that format is within length limitations of concardis, might need to shorten
          example: EF2022-000004-1028-200954-4711
        transaction_type:
          type: string
          enum:
            - due
            - payment
          example: payment
        method:
          type: string
          enum:
            - credit
            - paypal
            - transfer
            - internal
            - gift
          example: credit
        amount:
          $ref: '#/components/schemas/Amount'
        comment:
          type: string
        status:
          $ref: '#/components/schemas/TransactionStatus'
        payment_processor_information:
          $ref: '#/components/schemas/PaymentProcessorInformation'
        payment_start_url:
          type: string
          format: url
          description: if available, the URL to use for payment. For concardis, contains the pay link.
        effective_date:
          type: string
          format: date
          description: the valuta day (a concept from accounting).
          example: '2022-06-24'
        due_date:
          type: string
          format: date-time
          description: the time at which the dues should be paid at the latest, or you'll be considered overdue.
          example: '2022-08-24T14:22:28Z'
        creation_date:
          type: string
          format: date-time
          example: '2022-06-24T11:12:13Z'
    TransactionInitiator:
      type: object
      required:
        - debitor_id
      properties:
        debitor_id:
          type: integer
          format: int64
          minimum: 1
          description: the debitor the transaction concerns (the badge id)
    Amount:
      type: object
      required:
        - "currency"
        - "gross_cent"
        - "vat_rate"
      properties:
        currency:
          type: string
          default: EUR
          description: |-
            currency ISO code. 
            
            Since mixing currencies can lead to complex situations, we only support a single currency, which is defined in the configuration.
            
            Any other value will be rejected as an error.
        gross_cent:
          type: integer
          format: int64
          description: currency amount, may be negative, in smallest denomination of the currency (for example cent for EUR). The example value means 140 EUR.
          example: 14000
        vat_rate:
          type: number
          format: double
          description: VAT rate in percent. The example value means 7.7% VAT.
          example: 7.7
    TransactionStatus:
      type: string
      example: valid
      enum:
        - tentative
        - pending
        - valid
        - deleted
      description: |-
        Status of a transaction.
        
        * tentative (payments only): either we know that NO payment for this transaction has been initiated,
                                     or we cannot say for sure. Mostly used to store payment links before they
                                     have been used (though we may only learn about the fact after it's happened).
        * pending (payments only): we know that a payment for this transaction has been initiated, but the
                                   transaction hasn't been (manually or automatically) confirmed as successful
        * valid (dues and payments): dues or payments should count towards the balance, if payment, the
                                     transaction has been (manually or automatically) confirmed as successful
        * deleted (dues and payments): should not count towards the balance, only kept for historical reasons,
                                       for example, payment attempt has failed, or an admin made a mistake
    PaymentProcessorInformation:
      type: object
      description: internal information pertaining to the selected payment processor, such as a payment id, a payment URL, etc. Exact structure depends on the payment provider.
      additionalProperties: true
      example:
        id: 72168763
        booking_code: something
    Error:
      type: object
      required:
        - message
        - timestamp
        - requestid
      properties:
        timestamp:
          type: string
          format: date-time
          description: The time at which the error occurred.
          example: 2006-01-02T15:04:05+07:00
        requestid:
          type: string
          description: An internal trace id assigned to the error. Used to find logs associated with errors across our services. Display to the user as something to communicate to us with inquiries about the error.
          example: a8b7c6d5
        message:
          type: string
          description: |-
            A keyed description of the error. We do not write human readable text here because the user interface will be multi language.
            
            At this time, there are these values:
            - transaction.parse.error (json body parse error)
            - transaction.data.invalid (field data failed to validate, see details field for more information)
            - transaction.data.duplicate (duplicate referenceId)            
            - transaction.write.error (database error)
            - transaction.read.error (database error)
            - transaction.paylink.error (adapter failure while creating payment link)            
            - transaction.id.notfound (no such transaction in the database)
            - transaction.id.invalid (syntactically invalid transaction id, must be positive integer)
            - transaction.cannot.delete (deletion is not possible, e.g. because the grace period has expired for a valid payment)
            - auth.unauthorized (token missing completely or invalid or expired)
            - auth.forbidden (permissions missing)
            - request.parse.failed (request could not be parsed properly)
            - http.error.unkonwn (unknown error)
          example: transaction.data.invalid
        details:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
          description: Optional additional details about the error. If available, will usually contain English language technobabble.
          example:
            reference_id:
              - reference id must consist of A-Z 0-9 - only
            other:
              - you need to refill the flux capacitor before the operation can succeed
  securitySchemes:
    api_key:
      type: apiKey
      name: X-Api-Key
      in: header
    bearer_auth:
      type: http
      scheme: bearer
      bearerFormat: JWT
